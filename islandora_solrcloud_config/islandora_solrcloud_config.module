<?php

/**
 * @file
 * Configuration module for Islandora Solr.
 */

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_solrcloud_config_islandora_solr_primary_display() {
  return array(
    'solrcloud' => array(
      'name' => t('Solrcloud Aware'),
      'module' => 'islandora_solrcloud_config',
      'file' => 'includes/cloud_results.inc',
      'class' => "IslandoraSolrResultsCloud",
      'function' => "displayResults",
      'description' => t("Display search results taking external objects in account"),
    ),
  );
}

/**
 * Implements hook_islandora_solr_secondary_display().
 */

/**
 * Implements hook_menu().
 */
function islandora_solrcloud_config_menu() {
  $items['admin/islandora/search/islandora_solr/solrcloud'] = array(
    'title' => 'Solrcloud Settings',
    'description' => 'Configure Solrcloud search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solrcloud_admin_form'),
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_islandora_solr_results_alter().
 */

function islandora_solrcloud_config_islandora_solr_results_alter(&$search_result, $query_processor) {
   if ($query_processor->display == 'solrcloud') {
   foreach ($search_result as $object_index => $object_result) {
    if (isset($search_result[$object_index]['solr_doc']['PID_fullurl']) && !empty($search_result[$object_index]['solr_doc']['PID_fullurl']))
      {
      if (url_is_external($search_result[$object_index]['solr_doc']['PID_fullurl']))
        {
        $search_result[$object_index]['object_url']=$search_result[$object_index]['solr_doc']['PID_fullurl'];
        if ($search_result[$object_index]['thumbnail_url']!=drupal_get_path('module', 'islandora_solr') . '/images/defaultimg.png')
          {
          $search_result[$object_index]['thumbnail_url'] = $search_result[$object_index]['object_url'] . '/datastream/TN/view';
          }
        }
  }   }
}
}
/**
 * Implements hook_islandora_object_purged().
 * If you are using this module, means you are implementing Solr Cloud, then chances are fedoragsearch is 
 * not removing correctly your deleted documents from Solr
 * So we need to implement this locally, passing to /update handler <delete> query to Solr directly. No harm at all. 
 */

function islandora_solrcloud_config_islandora_object_purged($pid)
  {
  //variables islandora_solrcloud_setting_delete, is set for now in the solr display config form
  $delete_solrdoc_from_islandora = variable_get('islandora_solrcloud_setting_delete',FALSE);
  if ($delete_solrdoc_from_islandora)
    {
    $path_parts = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
    $solr = new Apache_Solr_Service($path_parts['host'], $path_parts['port'], $path_parts['path'] . '/');
    // Query is executed.
    try {
      $newpid=utf8_encode(variable_get('islandora_solrcloud_setting_uniqueid_prefix','').$pid);
      $newpid = htmlspecialchars($newpid, ENT_NOQUOTES, 'UTF-8');
      $rawDeletePost = '<delete><id>' . $newpid . '</id></delete>';
      
      $results= $solr->delete($rawDeletePost,$timeout = 3600);
      //We will leave commit out right now, softcommit should be enable and configured. If no we could en with a lot of
      // PERFORMANCE WARNING: Overlapping onDeckSearchers=X in Solr's log
      /*$rawCommitPost = '<commit waitSearcher="true" softCommit="true"/>';
      $results2= $solr->delete($rawCommitPost,$timeout = 3600);*/
      // We can't use stock $solr->commit() because it adds deprecated options, so we will have to send the commit directly, but
      //_sendRawPost is protected, so we will use ->delete which is just a wrapper to _sendRawPost to build our own <commit> xml
     }
    catch (Exception $e) {
      drupal_set_message(check_plain(t('Error deleting Document <PID> $newpid from Solr index')) . ' ' . $e->getMessage(), 'error');
    }

  
    if (isset($results)) {
      $solr_results = json_decode($results->getRawResponse(), TRUE);
      if ($solr_results['responseHeader']['status']==0) {
        drupal_set_message(t('Delete from index for document id: %newpid, object pid: %pid, was send to Solr',array('%newpid'=>$newpid,'%pid'=>$pid)),'status');
      }
      else {
         drupal_set_message(t('An error with code %code happened when trying to delete from Solr index, document id: %newpid for object pid: %pid ',array('%code'=>$solr_results['responseHeader']['status'],'%newpid'=>$newpid,'%pid'=>$pid)),'error');
      }
    }
   
    
    
  }
}






/**
 * Implements hook_theme().
 */
/*function islandora_solrcloud_config_theme() {
  $path = drupal_get_path('module', 'islandora_solrcloud_config');

  return array(
    'islandora_solr_cloud' => array(
      'path' => $path . '/theme',
      'template' => 'islandora-solr-cloud',
      'variables' => array('results' => NULL, 'elements' => array()),
    ),
  );
}*/

/**
 * Implements hook_islandora_solr_query().
 *
 * Takes the current results limit (admin default or from url parameter) and
 * finds the closed number that is dividable by 4 and 3, so when the layout is
 * sized down in a responsive layout, the last row of results won't show
 * 'trailing' results.
 */
/*function islandora_solrcloud_config_islandora_solr_query($islandora_solr_query) {

  // We're dealing with the grid display.
  if ($islandora_solr_query->display == 'grid') {
    // Set results limit.
    $limit = $islandora_solr_query->solrLimit;
    // Not dividable yet.
    $dividable = FALSE;
    while ($dividable == FALSE) {
      // Dividable by 4 and 3.
      if (($limit % 4) == 0 && ($limit % 3) == 0) {
        $dividable = TRUE;
        $solr_limit = $limit;
      }
      $limit++;
    }
    // Set new limit.
    $islandora_solr_query->solrLimit = $solr_limit;
  }
}*/
