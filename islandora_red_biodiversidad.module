<?php

/**
 * @file
 * Handles the creation and display of basic image objects.
 */

/**
 * Implements hook_islandora_view_print_object().
 */
/*
function islandora_red_biodiversidad_islandora_view_print_object($object) {
  $output = array();
  if (in_array('islandora:sp_red_biodiversidad', $object->models)) {
    $resource_url = url("islandora/object/{$object->id}/datastream/OBJ/view");
    $params = array(
      'title' => $object->label,
      'path' => $resource_url,
    );
	//Diego Pino Febrero 2014, Revisar
    // Theme the image seperatly.
    $variables['islandora_img'] = theme('image', $params);
    $output = theme('islandora_red_biodiversidad_print', array(
    'islandora_content' => $variables['islandora_img']));
  }

  return $output;
}

/**
 * Implements hook_menu().
 *
 * See https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7
 */
function islandora_red_biodiversidad_menu() {
  $items = array();
  $items['islandora/red_biodiversidad/autocomplete/%'] = array(
    'title' => 'Form Callbacks',
	'description' => 'Autocomplete a Field from DwC',
    'page callback' => 'islandora_red_biodiversidad_autocomplete',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callbacks.inc',
    'access arguments' => array('search islandora solr'),
  );
  /*$items['islandora/red_biodiversidad/validate/%'] = array(
    'title' => 'Form Validate and Populate Callbacks',
	'description' => 'Validate and populates related Species info from AJAX to form',
    'page callback' => 'islandora_red_biodiversidad_validateandpopulate',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callbacks.inc',
     'access arguments' => array('access content'),
  );*/
  
  
  $items['islandora/object/%islandora_object/redbiodiversidadtab'] = array(
    'weight' => 3,
    'title' => 'Map',
    'page callback' => 'islandora_red_biodiversidad_map_display',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/dwc_related'] = array(
    'weight' => 4,
    'title' => 'Related DwC',
    'page callback' => 'islandora_red_biodiversidad_dw_related_display',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_access',
    'access arguments' => array(2),
  );
  /*$items['islandora/object/%islandora_object/redbiodiversidad_collection_tab'] = array(
    'weight' => 4,
    'title' => 'Ficha Coleccion',
    'page callback' => 'islandora_red_biodiversidad_collection_display',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_collection_access',
    'access arguments' => array(2),
  );*/
   //Esto se movio a un modulo de islandora_import @see modules/
  /*$items['islandora/object/%islandora_object/manage/object/redbiodiversidad_excelform'] = array(
	  'weight' => 2,
      'title' => 'Importar Excel a esta coleccion',
	  'description' => 'Esto permite poblar una coleccion con datos GBIF desde excel',
      'page callback' => 'drupal_get_form',
	  'page arguments' => array('red_biodiversidad_excelform',2),
	  'type' => MENU_LOCAL_ACTION,
	  'file' =>'includes/biodiversidad_import.admin.inc',
	  'access callback' => 'islandora_red_biodiversidad_collection_access',
	  'access arguments' => array(2),
  );*/
  
  return $items;
}
/**
 * Determines whether or not to show this modules redbiodiversidad view tab.
 *
 * The tab and it's callback are defined in the islandora_red_biodiversidad_menu()
 *
 * We check it's cmodel here so that we do not try to display this tab for all
 * objects.  We could also call other functions from here to help us determine
 * if we are allowed to show the tab
 *
 * @param IslandoraObject $islandora_object
 *   An Islandora object
 *
 * @return bool
 *   TRUE if we are allowed to show the tab for the corresponding object
 */
function islandora_red_biodiversidad_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  if (array_intersect(array('islandora:sp_red_biodiversidad'), $models)) {
    return TRUE;
  }
  return FALSE;
}
function islandora_red_biodiversidad_collection_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  
  if (isset($islandora_object['COLLECTION_POLICY']))//Es coleccion de algun tipo
  	{
	    $policy = new CollectionPolicy($islandora_object['COLLECTION_POLICY']->content);
	    $policy_content_models = $policy->getContentModels();//Entrega los modelos de contenido que permite esta coleccion
		
	    if (array_intersect(array('islandora:sp_red_biodiversidad'), array_keys($policy_content_models)) && array_intersect(array('islandora:collectionCModel'), $models)) {
	      return TRUE; //Es decir es coleccion y sus hijos pueden ser de modelo sp_red_biodiversidad
	    }
  	}
 
 
  return FALSE;
}
/**
 * This is the callback function defined in the menu array of this module.
 *
 * This function will be called if our islandora_red_biodiversidad_access() check returns true
 * we call another theme function here which also invokes the desired preprocessor
 *
 * @param IslandoraObject $islandora_object
 *   an islandora object
 *
 * @return string
 *   the rendered output
 */

function islandora_red_biodiversidad_map_display($islandora_object) {
  $output = theme('islandora_red_biodiversidad_map',
    array('islandora_object' => $islandora_object,'results'=>NULL));
  return $output;
}
function islandora_red_biodiversidad_dw_related_display($islandora_object) {
  $output = theme('islandora_dwc_related',
    array('islandora_object' => $islandora_object));
  return $output;
}
function islandora_red_biodiversidad_collection_display($islandora_object) {
  $output = theme('islandora_red_biodiversidad_collection',
    array('islandora_object' => $islandora_object));
  return $output;
}
/**
 * Implements hook_preprocess_theme().
 *
 * We have implemented several preprocessors in this module this one is
 * for the red_biodiversidad tabbed view
 *
 * This is a Drupal hook, not supplied by islandora.
 */

function islandora_red_biodiversidad_preprocess_islandora_red_biodiversidad_collection(array &$variables) {
  $islandora_object = $variables['islandora_object'];
  $content = $islandora_object['OBJ']->content;
  $variables['red_biodiversidad_content_tab'] = $content;
}
/**
* Implements hook_CMODEL_PID_islandora_view_object().
*
* this function will be called everytime islandora loads an object with a
* cmodel of islandora:sp_red_biodiversidad.
*
* This function is calling the theme function to
* theme islandora_red_biodiversidad which also invokes
* the islandora_red_biodiversidad_preprocessor
**
 * Implements hook_preprocess_theme().
 *
 * We have implemented several preprocessors in this module this one is
 * for the piggyback tabbed view
 *
 * This is a Drupal hook, not supplied by islandora.
 */


function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_islandora_view_object($object,$page_number, $page_size) {  
  $output = theme('islandora_dwc', array('islandora_object' => $object));
  return array('' => $output);
}
/**
* Implements hook_CMODEL_PID_islandora_view_object().
*
* this function will be called everytime islandora loads an object with a
* cmodel of islandora:sp_red_biodiversidad_collection.
*
* This function is calling the theme function to
* theme islandora_red_biodiversidad which also invokes
* the islandora_red_biodiversidad_preprocessor
*/
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_collection_islandora_view_object($object) {
  $output = theme('islandora_red_biodiversidad', array('islandora_object' => $object));
  return array('' => $output);
}
/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
*/
function islandora_red_biodiversidad_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_dwc' => array(
     'file' => 'theme/theme.inc',
	  'template' => 'theme/islandora-red-biodiversidad',
	   'pattern' => 'islandora_red_biodiversidad__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_red_biodiversidad_print' => array(
      'template' => 'theme/islandora-red-biodiversidad-print',
      'variables' => array('islandora_content' => NULL),
    ),
    // Themes the output of the  tab.
    'islandora_red_biodiversidad_map' => array(
	  'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-red-biodiversidad-map',
      'variables' => array('islandora_object' => NULL,'results'=>NULL),
    ),
    'islandora_dwc_related' => array(
	  'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-red-biodiversidad-tab-related',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_red_biodiversidad_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  
  // Biodiversidad Content Model , we will use this as additional content model for every other model in this module
  $biodiversidad_content_model = $connection->repository->constructObject('islandora:sp_red_biodiversidad');
  $biodiversidad_content_model->owner = 'fedoraAdmin';
  $biodiversidad_content_model->label = 'Islandora Red Biodiversidad Content Model';
  $biodiversidad_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model);
  
  
  // Biodiversidad Content Model Simple Darwin Core
  $biodiversidad_content_model_simpledwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_simpledwc');
  $biodiversidad_content_model_simpledwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_simpledwc->label = 'Islandora Red Biodiversidad Content Model Simple Darwin Core';
  $biodiversidad_content_model_simpledwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_simpledwc);
  // Biodiversidad Content Model Darwin Core Class Occurrence
  $biodiversidad_content_model_occurrencedwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dwcclassoccurrence');
  $biodiversidad_content_model_occurrencedwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_occurrencedwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:Occurrence';
  $biodiversidad_content_model_occurrencedwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_occurrencedwc);
  // Biodiversidad Content Model Darwin Core Class Event
  $biodiversidad_content_model_eventdwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dwcclassevent');
  $biodiversidad_content_model_eventdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_eventdwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:Event';
  $biodiversidad_content_model_eventdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
   islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_eventdwc);
  // Biodiversidad Content Model Darwin Core Class Identification
  $biodiversidad_content_model_identificationdwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dwcclassidentification');
  $biodiversidad_content_model_identificationdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_identificationdwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:Identification';
  $biodiversidad_content_model_identificationdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
   islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_identificationdwc);
  // Biodiversidad Content Model Darwin Core Class dcterm:Location
  $biodiversidad_content_model_locationdwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dctermlocation');
  $biodiversidad_content_model_locationdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_locationdwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:dcterms:Location';
  $biodiversidad_content_model_locationdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_locationdwc);
  // Biodiversidad Content Model Darwin Core Class:Taxon
  $biodiversidad_content_model_taxondwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dwcclasstaxon');
  $biodiversidad_content_model_taxondwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_taxondwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:Taxon';
  $biodiversidad_content_model_taxondwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_taxondwc);
  // Biodiversidad Content Model Darwin Core Class:MaterialSample
  $biodiversidad_content_model_materialsampledwc = $connection->repository->constructObject('islandora:sp_red_biodiversidad_dwcclasssample');
  $biodiversidad_content_model_materialsampledwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_materialsampledwc->label = 'Islandora Red Biodiversidad Content Model Darwin Core Class:Sample';
  $biodiversidad_content_model_materialsampledwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_materialsampledwc);
  
    
  // Biodiversidad Collection.
  $biodiversidad_collection = $connection->repository->constructObject('islandora:sp_red_biodiversidad_collection');
  $biodiversidad_collection->owner = 'fedoraAdmin';
  $biodiversidad_collection->label = 'Red Biodiversidad Collection';
  $biodiversidad_collection->models = 'islandora:collectionCModel';
  $biodiversidad_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $biodiversidad_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_red_biodiversidad_collection_policy.xml", FALSE);
  $biodiversidad_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $biodiversidad_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $biodiversidad_collection->ingestDatastream($datastream);
  return array(
    'islandora_red_biodiversidad' => array(
      'title' => 'Islandora Red Biodiversidad',
      'objects' => array(
		$biodiversidad_content_model,
		$biodiversidad_content_model_simpledwc,
		$biodiversidad_content_model_occurrencedwc,
		$biodiversidad_content_model_eventdwc,
		$biodiversidad_content_model_identificationdwc,
		$biodiversidad_content_model_locationdwc,
		$biodiversidad_content_model_taxondwc,
		$biodiversidad_content_model_materialsampledwc,
        $biodiversidad_collection,
      ),
    ),
  );
}
/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */


function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_simpledwc_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
 
}
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_dwcclassoccurrence_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_dwcclassevent_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_dwcclasstaxon_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_dwcclassidentification_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_islandora_sp_red_biodiversidad_dctermlocation_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}

/**
 * Implements hook_preprocess_theme().
 Diego Pino, Febrero 2014
 TODO:Acá debemos integrar todos los preprocesos de este modelo de contenido
 El actual, el de thumbnails nos puede servir, aunque seria mejor manera las imágenes como objetos aparte y asociados
 incluimos Transformaciones para Darwin Core
 */
function islandora_red_biodiversidad_preprocess_islandora_red_biodiversidad(array &$variables) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $islandora_object = $variables['islandora_object'];
  $repository = $islandora_object->repository;
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/metadata');

  // We should eventually remove the DC object and dc_array code as it only
  // exists to not break legacy implementations.
  if (islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['DC'])) {
    try {
      $dc = $islandora_object['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      drupal_set_message(t('Error retrieving object %s %t', array('%s' => $islandora_object->id, '%t' => $e->getMessage())), 'error', FALSE);
    }
  }
  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : array();
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'islandora_red_biodiversidad__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);
  $variables['metadata'] = islandora_retrieve_metadata_markup($islandora_object);
  $variables['description'] = islandora_retrieve_description_markup($islandora_object);

  // Original.
  if (isset($islandora_object['OBJ']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['OBJ'])) {
    $full_size_url = url("islandora/object/{$islandora_object->id}/datastream/OBJ/view", array('absolute' => TRUE));
    $variables['islandora_full_url'] = $full_size_url;
    $params = array(
      'title' => $islandora_object->label,
      'path' => $full_size_url,
    );
    $variables['islandora_full_img'] = theme('image', $params);
  }
  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $thumbnail_size_url = url("islandora/object/{$islandora_object->id}/datastream/TN/view");
    $params = array(
      'title' => $islandora_object->label,
      'path' => $thumbnail_size_url,
    );
    $variables['islandora_thumbnail_img'] = theme('image', $params);
  }
 
  
}
/**
 * Implements hook_xml_form_builder_get_transforms().
 *Diego Pino Navarro, Febrero 2014
 *Este hook implementa la asociación de Formas HTML con el modelo de datos
 */
function islandora_red_biodiversidad_xml_form_builder_get_transforms() {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  return array(
    'dwc2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwc2dc.xsl",
	'dwcclass2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclass2dc.xsl",
	'dwcclassevent2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclasstaxon2dc.xsl",
	'dwcclassoccurrence2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassoccurrence2dc.xsl",
	'dwcclassidentification2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassidentification2dc.xsl",
  );
}




/**
 * Implements hook_islandora_content_model_forms_form_associations().
 *Diego Pino Navarro, Febrero 2014
 *Este hook implementa la asociación de Formas HTML con el modelo de datos
 */								
function islandora_red_biodiversidad_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_red_biodiversidad_dwc_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_simpledwc',
      'form_name' => 'Simple Darwin Core form',
      'dsid' => 'DwC',
      'title_field' => array('SimpleDarwinRecord','dwc_fields_taxon','scientificName'),
      'transform' => 'dwc2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassoccurrence_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_dwcclassoccurrence',
      'form_name' => 'Darwin Core form Class: Occurrence',
      'dsid' => 'DwC',
      'title_field' => array('Occurrence','dwc_fields_occurrence','occurrenceID'),
      'transform' => 'dwcclassoccurrence2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassevent_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_dwcclassevent',
      'form_name' => 'Darwin Core form Class: Event',
      'dsid' => 'DwC',
      'title_field' => array('Event','dwc_fields_event','eventID'),
      'transform' => 'dwcclassevent2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclasstaxon_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_dwcclasstaxon',
      'form_name' => 'Darwin Core form Class: Taxon',
      'dsid' => 'DwC',
      'title_field' => array('Taxon','dwc_fields_taxon','scientificName'),
      'transform' => 'dwcclasstaxon2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassidentification_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_dwcclassidentification',
      'form_name' => 'Darwin Core form Class: Identification',
      'dsid' => 'DwC',
      'title_field' => array('Identification','dwc_fields_identification','identificationID'),
      'transform' => 'dwcclassidentification2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dctermsclasslocation_form' => array(
      'content_model' => 'islandora:sp_red_biodiversidad_dctermlocation',
      'form_name' => 'Darwin Core form Class: Location',
      'dsid' => 'DwC',
      'title_field' => array('Location','dwc_fields_location','locationID'),
      'transform' => 'dwcclass2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_red_biodiversidad_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  return array(
    'Simple Darwin Core form' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwC.xml",
    ),
    'Darwin Core form Class: Occurrence' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassOccurrence.xml",
    ),
    'Darwin Core form Class: Event' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassEvent.xml",
    ),
    'Darwin Core form Class: Taxon' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassTaxon.xml",
    ),
    'Darwin Core form Class: Identification' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassIdentification.xml",
    ),
    'Darwin Core form Class: Location' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassLocation.xml",
    ),
  );
}


/* Esto altera los valores por defecto para algunos de los campos de esta forma 
implements hook_form_alter
We wan´t to alter the default form default values based on global configurations for a particular content 
model but xml forms do not get an unique FORM ID(all id`s are islandora_ingest_form) so we must check for content model and step id
*/

function islandora_red_biodiversidad_form_alter(&$form, &$form_state, $form_id) {
	
	if (isset($form['form_step_id']['#value']))
		{
		if (($form_id == 'islandora_ingest_form') && ($form['form_step_id']['#value']=='xml_form_builder_metadata_step')) //We are dealing with the form asocciated as default for this content model
			{
			switch($form_state['islandora']['shared_storage']['models'][0])
				{
				case 'islandora:sp_red_biodiversidad_dwcclassoccurrence':
				if (isset($form['Occurrence']['record_level_terms']['institutionCode']))//First check if it´s still there!
					{
					$form['Occurrence']['record_level_terms']['institutionCode']['#default_value']='CBUCN'; //@TODO we will get this and other values from a global configuration value	
					}
				}
			}
		}
	
	
	}
	
	
function islandora_red_biodiversidad_validateandpopulateTaxon(&$form, &$form_state)
	{        
	
		 //drupal_set_message(t('You just performed an ajax reload.'));
		 // $text = $form_state['values']['html_command_example'];
		  $selector ='#edit-dwc-fields-taxon-scientificname';
		  $commands = array();
	 
	 
		  $parametro=urlencode(trim($form['Taxon']['dwc_fields_taxon']['scientificName']['#value']));
	 
		  $url ="http://api.gbif.org/v0.9/species/match?strict=true&verbose=true&name=".$parametro;
		  drupal_set_message($url);
		  $response = drupal_http_request($url);
		    if (!empty($response->error)) {
		      $msg_args = array(
		        '%url' => $url,
		        '@code' => $response->code,
		        '%error' => $response->error,
		      );
		      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
		      return FALSE;
		    }
		    $data = drupal_json_decode($response->data);
		
			//Ya tengo la info, solo voy a sacar el match más cercano
			if ($data['matchType']=="EXACT")//perfecto, ahora saco el resto de la info
				{
				if (array_key_exists('usageKey',$data))
					{
						if ($data['rank']=="SPECIES")
							{
							$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-scientificname','val',array($data['scientificName']));
							$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-taxonid','val',array("http://www.gbif.org/species/".$data['usageKey']));
							}
						$url2 ="http://api.gbif.org/v0.9/species/".$data['usageKey'];
				  	    $response2 = drupal_http_request($url2);
				  	    if (!empty($response2->error)) {
				  	      $msg_args = array(
				  	        '%url' => $url2,
				  	        '@code' => $response2->code,
				  	        '%error' => $response2->error,
				  	      );
				  	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
				  	      return FALSE;
				  	    }
						 $data2 = drupal_json_decode($response2->data);
						 if (array_key_exists('phylum',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-phylum','val',array($data2['phylum']));	
						 	}
						 if (array_key_exists('clazz',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-class','val',array($data2['clazz']));	
						 	}
						 if (array_key_exists('order',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-order','val',array($data2['order']));		
						 	}
						 if (array_key_exists('family',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-family','val',array($data2['family']));		
						 	}
						 if (array_key_exists('genus',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-genus','val',array($data2['genus']));		
						 	}
					 
					 
					 
					 
					}
				
				}
				return array('#type' => 'ajax', '#commands' => $commands);
		
	}	
	
	
function islandora_red_biodiversidad_validateandpopulate(&$form, &$form_state)
{        
	
	 drupal_set_message(t('You just performed an ajax reload.'));
	 // $text = $form_state['values']['html_command_example'];
	  $selector ='#edit-simpledarwinrecord-dwc-fields-taxon-scientificname';
	  $commands = array();
	 
	 
	  $parametro=urlencode(trim($form['SimpleDarwinRecord']['dwc_fields_taxon']['scientificName']['#value']));
	 
	  $url ="http://api.gbif.org/v0.9/species/match?strict=true&verbose=true&name=".$parametro;
	  drupal_set_message($url);
	  $response = drupal_http_request($url);
	    if (!empty($response->error)) {
	      $msg_args = array(
	        '%url' => $url,
	        '@code' => $response->code,
	        '%error' => $response->error,
	      );
	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
	      return FALSE;
	    }
	    $data = drupal_json_decode($response->data);
		
		//Ya tengo la info, solo voy a sacar el match más cercano
		if ($data['matchType']=="EXACT")//perfecto, ahora saco el resto de la info
			{
			if (array_key_exists('usageKey',$data))
				{
					if ($data['rank']=="SPECIES")
						{
						$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-scientificname','val',array($data['scientificName']));
						$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-taxonid','val',array("http://www.gbif.org/species/".$data['usageKey']));
						}
					$url2 ="http://api.gbif.org/v0.9/species/".$data['usageKey'];
			  	    $response2 = drupal_http_request($url2);
			  	    if (!empty($response2->error)) {
			  	      $msg_args = array(
			  	        '%url' => $url2,
			  	        '@code' => $response2->code,
			  	        '%error' => $response2->error,
			  	      );
			  	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
			  	      return FALSE;
			  	    }
					 $data2 = drupal_json_decode($response2->data);
					
					 if (array_key_exists('phylum',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-phylum','val',array($data2['phylum']));	
					 	}
					 if (array_key_exists('clazz',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-class','val',array($data2['clazz']));	
					 	}
					 if (array_key_exists('order',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-order','val',array($data2['order']));		
					 	}
					 if (array_key_exists('family',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-family','val',array($data2['family']));		
					 	}
					 if (array_key_exists('genus',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-genus','val',array($data2['genus']));		
					 	}
					 
					 
					 
					 
				}
				
			}
			return array('#type' => 'ajax', '#commands' => $commands);
		
}
class IslandoraRedBiodiversidadMapObjectLocation {
  /**
   * Constructor for the helper map object.
   *
   * @param NULL|string $marker_color
   *   The color of the marker or NULL if we are not specifying one.
   * @param NULL|string $lat
   *   The latitude of the co-ordinate we are rendering or NULL.
   * @param NULL|string $long
   *   The longitude of the co-ordinate we are rendering or NULL.
   * @param NULL|string $balloon_text
   *   The markup for the balloon or NULL.
   */
  public function __construct($marker_color = NULL, $lat = NULL, $long = NULL, $balloon_text = '') {
    $this->marker_color = $marker_color;
    $this->latitude = $lat;
    $this->longitude = $long;
    $this->balloon_text = $balloon_text;
  }
}	
