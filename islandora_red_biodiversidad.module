<?php

/**
 * @file
 * Handles Biodiversity data and relations using Darwin Core Classes(types)
 * This solution Pack provides Content Models based en Darwin Core Types, terms and Formats(DWCA) 
 * It relies on islandora_ontologies_solution_pack to relate dwc objects
 */

// Permissions.
define('ISLANDORA_RED_BIODVIERSIDAD_ADMINISTER_PERMISSION', 'administer islandora red_biodiversidad');

/**
 * Implements hook_permission().
 */
function islandora_red_biodiversidad_permission() {
  return array(
    ISLANDORA_RED_BIODVIERSIDAD_ADMINISTER_PERMISSION => array(
      'title' => t('Administer Islandora Red Biodiversidad'),
      'description' => t('Access Islandora Red Biodiversidad administration page.'),
    ),
  );
}





/**
 * Implements hook_menu().
 *
 * See https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7
 */
function islandora_red_biodiversidad_menu() {
  $items['admin/islandora/solution_pack_config/red_biodiversidad'] = array(
    'title' => 'Islandora Red Biodiversidad',
    'description' => 'Configure the Red Biodiversidad solution pack.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_red_biodiversidad_admin'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.form.inc',
    'access arguments' => array(ISLANDORA_RED_BIODVIERSIDAD_ADMINISTER_PERMISSION),
  );
  $items['islandora/red_biodiversidad/autocomplete/%'] = array(
    'title' => 'Form Callbacks',
	'description' => 'Autocomplete a Field from DwC',
    'page callback' => 'islandora_red_biodiversidad_autocomplete',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callbacks.inc',
    'access arguments' => array('search islandora solr'),
  );
  
  
  $items['islandora/object/%islandora_object/redbiodiversidadtab'] = array(
    'weight' => 3,
    'title' => 'Map',
    'page callback' => 'islandora_red_biodiversidad_map_display',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/dwc_related'] = array(
    'weight' => 4,
    'title' => 'Related DwC',
    'page callback' => 'islandora_red_biodiversidad_dw_related_display',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/dwc_archive'] = array(
    'weight' => 4,
    'title' => 'DwC-Archive',
    'description' => t('Manage Darwin Core Archive Generation'),
    'file' => 'includes/manage_dwca.inc',
    'page callback' =>'islandora_red_biodiversidad_dwcarchive_manage',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_red_biodiversidad_generate_dwca_access',
    'access arguments' => array(2),
  );

  return $items;
}
/**
 * Determines whether or not to show this modules redbiodiversidad view tab.
 *
 * The tab and it's callback are defined in the islandora_red_biodiversidad_menu()
 *
 * We check it's cmodel here so that we do not try to display this tab for all
 * objects.  We could also call other functions from here to help us determine
 * if we are allowed to show the tabbiodiversity:biodiversityCModel
 *
 * @param IslandoraObject $islandora_object
 *   An Islandora object
 *
 * @return bool
 *   TRUE if we are allowed to show the tab for the corresponding object
 */
function islandora_red_biodiversidad_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  if (array_intersect(array('biodiversity:biodiversityCModel'), $models)) {
    return TRUE;
  }
  return FALSE;
}
function islandora_red_biodiversidad_collection_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  
  if (isset($islandora_object['COLLECTION_POLICY']))//Es coleccion de algun tipo
  	{
	    $policy = new CollectionPolicy($islandora_object['COLLECTION_POLICY']->content);
	    $policy_content_models = $policy->getContentModels();//Entrega los modelos de contenido que permite esta coleccion
		
	    if (array_intersect(array('biodiversity:biodiversityCModel'), array_keys($policy_content_models)) && array_intersect(array('islandora:collectionCModel'), $models)) {
	      return TRUE; //Es decir es coleccion y sus hijos pueden ser de modelo biodiversity:biodiversityCModel
	    }
  	}
 
 
  return FALSE;
}
//Handles Darwin Core Archive generation access
function islandora_red_biodiversidad_generate_dwca_access($islandora_object) {
    if (!isset($islandora_object)) {
      return FALSE;
    }
    $models = $islandora_object->models;
    if (array_intersect(array('biodiversity:DWCACModel'), $models)) {
     return (islandora_object_access(ISLANDORA_ADD_DS, $islandora_object) && islandora_object_access(ISLANDORA_METADATA_EDIT, $islandora_object) && islandora_object_access(ISLANDORA_METADATA_EDIT, $islandora_object));
    }
    return FALSE;
}


/**
 * This is the callback function defined in the menu array of this module.
 *
 * This function will be called if our islandora_red_biodiversidad_access() check returns true
 * we call another theme function here which also invokes the desired preprocessor
 *
 * @param IslandoraObject $islandora_object
 *   an islandora object
 *
 * @return string
 *   the rendered output
 */

function islandora_red_biodiversidad_islandora_view_print_object($islandora_object)
	{
	$output = theme('islandora_red_biodiversidad_print', array('islandora_object' =>$islandora_object,'islandora_content'=>NULL));		
	return $output;	
	} 



function islandora_red_biodiversidad_map_display($islandora_object) {
  $output = theme('islandora_red_biodiversidad_map',
    array('islandora_object' => $islandora_object,'results'=>NULL));
  return $output;
}
function islandora_red_biodiversidad_dw_related_display($islandora_object) {
  $output = theme('islandora_dwc_related',
    array('islandora_object' => $islandora_object));
  return $output;
}
function islandora_red_biodiversidad_collection_display($islandora_object) {
  $output = theme('islandora_red_biodiversidad_collection',
    array('islandora_object' => $islandora_object));
  return $output;
}
/**
 * Implements hook_preprocess_theme().
 *
 * We have implemented several preprocessors in this module this one is
 * for the red_biodiversidad tabbed view
 *
 * This is a Drupal hook, not supplied by islandora.
 */

function islandora_red_biodiversidad_preprocess_islandora_red_biodiversidad_collection(array &$variables) {
  $islandora_object = $variables['islandora_object'];
  $content = $islandora_object['OBJ']->content;
  $variables['red_biodiversidad_content_tab'] = $content;
}
/**
* Implements hook_CMODEL_PID_islandora_view_object().
*
* this function will be called everytime islandora loads an object with a
* cmodel of biodiversity:biodiversityCModel.
*
* This function is calling the theme function to
* theme islandora_red_biodiversidad which also invokes
* the islandora_red_biodiversidad_preprocessor
**
 * Implements hook_preprocess_theme().
 *
 * We have implemented several preprocessors in this module this one is
 *
 * This is a Drupal hook, not supplied by islandora.
 */


function islandora_red_biodiversidad_biodiversity_biodiversityCModel_islandora_view_object($object,$page_number, $page_size) {  
    //because we have a common CMODEL for every object from this solution pack, we must de the check inside instead o making another hook beacuse they could(and do!) overlap
    $path = drupal_get_path('module', 'islandora');
    drupal_add_js(array(
      'islandora' => array(
        'print_img' => $path . '/images/print-icon.png'),
        ), array(
          'type' => 'setting'));

    drupal_add_js(array('islandora' => array('print_link' => 'islandora/object/' . $object->id . '/print_object')), array('type' => 'setting'));
    drupal_add_js($path . '/js/add_print.js');
	
	
	$models = $object->models;
    if (array_intersect(array('biodiversity:DWCACModel'), $models)) {
	 $output = theme('islandora_dwca', array('islandora_object' => $object));
	}
	else
	{
	  $output = theme('islandora_dwc', array('islandora_object' => $object));	
	}

  
  return array('' => $output);
  
}

/**
* Implements hook_CMODEL_PID_islandora_view_object().
*
* this function will be called everytime islandora loads an object with a
* cmodel of biodiversity:biodiversityCModel_collection.
*
* This function is calling the theme function to
* theme islandora_red_biodiversidad which also invokes
* the islandora_red_biodiversidad_preprocessor
*/
function islandora_red_biodiversidad_biodiversity_biodiversityCModel_collection_islandora_view_object($object) {
  $output = theme('islandora_red_biodiversidad', array('islandora_object' => $object));
  return array('' => $output);
}


/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
*/
function islandora_red_biodiversidad_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_dwc' => array(
     'file' => 'theme/theme.inc',
	  'template' => 'theme/islandora-red-biodiversidad',
	   'pattern' => 'islandora_red_biodiversidad__',
      'variables' => array('islandora_object' => NULL),
	  'render element'=>'eol_render_element',
    ),
    'islandora_red_biodiversidad_print' => array(
	  'file' => 'theme/print.inc',
      'template' => 'theme/islandora-red-biodiversidad-print',
      'variables' => array('islandora_object' => NULL, 'content' => NULL,
        'islandora_content' => NULL)
    ),
    // Themes the output of the  tab.
    'islandora_red_biodiversidad_map' => array(
	  'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-red-biodiversidad-map',
      'variables' => array('islandora_object' => NULL,'results'=>NULL),
    ),
    'islandora_dwc_related' => array(
	  'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-red-biodiversidad-tab-related',
      'variables' => array('islandora_object' => NULL),
    ),
      'islandora_dwca' => array(
       'file' => 'theme/theme.inc',
  	  'template' => 'theme/islandora-red-biodiversidad-dwca',
        'variables' => array('islandora_object' => NULL),
      ),
	
	
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_red_biodiversidad_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  
  // Biodiversidad Content Model , we will use this as additional content model for every other model in this module
  $biodiversidad_content_model = $connection->repository->constructObject('biodiversity:biodiversityCModel');
  $biodiversidad_content_model->owner = 'fedoraAdmin';
  $biodiversidad_content_model->label = 'Biodiversity Content Model';
  $biodiversidad_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model);
  
  
 /* DWCA Content Model, used for sharing datasets as a Package with GBIF. Objects of this type will(could) be created using a processor that parses Objects belonging to CMODELS of this solution pack and their relations to other, contained in a Collection.
 */
  $biodiversidad_content_model_dwca = $connection->repository->constructObject('biodiversity:DWCACModel');
  $biodiversidad_content_model_dwca->owner = 'fedoraAdmin';
  $biodiversidad_content_model_dwca->label = 'Darwin Core Archive Content Model';
  $biodiversidad_content_model_dwca->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  /* @TODO this composite stream is different, must consider a ZIP file, Metadata.xml, EML, etc */ 
  $ds_composite_datastream_dwca = $biodiversidad_content_model_dwca->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds_composite_datastream_dwca->label = 'DS-COMPOSITE-MODEL';
  $ds_composite_datastream_dwca->mimetype = 'text/xml';
  $ds_composite_datastream_dwca->setContentFromFile("$module_path/xml/islandora_red_biodiversidad_dwca_ds_composite_model.xml", FALSE);
  $biodiversidad_content_model_dwca->ingestDatastream($ds_composite_datastream_dwca);
  
  
  // Biodiversidad Content Model Simple Darwin Core
  $biodiversidad_content_model_simpledwc = $connection->repository->constructObject('biodiversity:SimpledwcCModel');
  $biodiversidad_content_model_simpledwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_simpledwc->label = 'Simple Darwin Core Content Model';
  $biodiversidad_content_model_simpledwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_simpledwc);
  // Biodiversidad Content Model Darwin Core Class Occurrence
  $biodiversidad_content_model_occurrencedwc = $connection->repository->constructObject('biodiversity:OccurrenceCModel');
  $biodiversidad_content_model_occurrencedwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_occurrencedwc->label = 'Darwin Core Class Occurrence Content Model';
  $biodiversidad_content_model_occurrencedwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_occurrencedwc);
  // Biodiversidad Content Model Darwin Core Class Event
  $biodiversidad_content_model_eventdwc = $connection->repository->constructObject('biodiversity:EventCModel');
  $biodiversidad_content_model_eventdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_eventdwc->label = 'Darwin Core Class Event Content Model';
  $biodiversidad_content_model_eventdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
   islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_eventdwc);
  // Biodiversidad Content Model Darwin Core Class Identification
  $biodiversidad_content_model_identificationdwc = $connection->repository->constructObject('biodiversity:IdentificationCModel');
  $biodiversidad_content_model_identificationdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_identificationdwc->label = 'Darwin Core Class Identification Content Model ';
  $biodiversidad_content_model_identificationdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
   islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_identificationdwc);
  // Biodiversidad Content Model Darwin Core Class dcterm:Location
  $biodiversidad_content_model_locationdwc = $connection->repository->constructObject('biodiversity:LocationCModel');
  $biodiversidad_content_model_locationdwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_locationdwc->label = 'Darwin Core Class Location Content Model';
  $biodiversidad_content_model_locationdwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_locationdwc);
  // Biodiversidad Content Model Darwin Core Class:Taxon
  $biodiversidad_content_model_taxondwc = $connection->repository->constructObject('biodiversity:TaxonCModel');
  $biodiversidad_content_model_taxondwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_taxondwc->label = 'Darwin Core Class Taxon Content Model ';
  $biodiversidad_content_model_taxondwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_taxondwc);
  // Biodiversidad Content Model Darwin Core Class:MaterialSample
  $biodiversidad_content_model_materialsampledwc = $connection->repository->constructObject('biodiversity:MaterialSampleCModel');
  $biodiversidad_content_model_materialsampledwc->owner = 'fedoraAdmin';
  $biodiversidad_content_model_materialsampledwc->label = 'Darwin Core Class MaterialSample Content Model ';
  $biodiversidad_content_model_materialsampledwc->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_materialsampledwc);
  // Biodiversidad Content Model Darwin Core Class:GeologicalContext
   $biodiversidad_content_model_geologicalcontextdwc = $connection->repository->constructObject('biodiversity:GeologicalContextCModel');
   $biodiversidad_content_model_geologicalcontextdwc->owner = 'fedoraAdmin';
   $biodiversidad_content_model_geologicalcontextdwc->label = 'Darwin Core Class GeologicalContext Content Model ';
   $biodiversidad_content_model_geologicalcontextdwc->models = 'fedora-system:ContentModel-3.0';
   // DS-COMPOSITE-MODEL Datastream.
   islandora_red_biodiversidad_ingest__red_biodiversidad_ds_composite_datastream($biodiversidad_content_model_geologicalcontextdwc);
  
    
  // Biodiversidad Collection.
  $biodiversidad_collection = $connection->repository->constructObject('biodiversity:biodiversity_collection');
  $biodiversidad_collection->owner = 'fedoraAdmin';
  $biodiversidad_collection->label = 'Red Biodiversidad Collection';
  $biodiversidad_collection->models = 'islandora:collectionCModel';
  $biodiversidad_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $biodiversidad_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_red_biodiversidad_collection_policy.xml", FALSE);
  $biodiversidad_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $biodiversidad_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $biodiversidad_collection->ingestDatastream($datastream);
  return array(
    'islandora_red_biodiversidad' => array(
      'title' => 'Islandora Red Biodiversidad',
      'objects' => array(
		$biodiversidad_content_model_dwca,
		$biodiversidad_content_model,
		$biodiversidad_content_model_simpledwc,
		$biodiversidad_content_model_occurrencedwc,
		$biodiversidad_content_model_eventdwc,
		$biodiversidad_content_model_identificationdwc,
		$biodiversidad_content_model_locationdwc,
		$biodiversidad_content_model_taxondwc,
		$biodiversidad_content_model_materialsampledwc,
		$biodiversidad_content_model_geologicalcontextdwc,
        $biodiversidad_collection,
      ),
    ),
  );
}
/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */

function islandora_red_biodiversidad_biodiversity_DWCACModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
 /* @TODO add Derivative ZIP based on metadata content of defined associated Collection */
 
}
function islandora_red_biodiversidad_biodiversity_SimpledwcCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
 
}
function islandora_red_biodiversidad_biodiversity_OccurrenceCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_EventCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_TaxonCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_IdentificationCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_LocationCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_MaterialSampleCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}
function islandora_red_biodiversidad_biodiversity_GeologicalContextCModel_islandora_object_ingested(AbstractObject $fedora_object) {
  module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
  islandora_red_biodiversidad_add_red_biodiversidad_content_model($fedora_object);
  islandora_red_biodiversidad_add_thumbnail_icon_bycontent_model($fedora_object);
}

/**
 * Implements hook_preprocess_theme().

 */
function islandora_red_biodiversidad_preprocess_islandora_red_biodiversidad(array &$variables) {
  //Not being called....
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $islandora_object = $variables['islandora_object'];
  $repository = $islandora_object->repository;
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/metadata');
  
  if (islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['DC'])) {
    try {
      $dc = $islandora_object['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      drupal_set_message(t('Error retrieving object %s %t', array('%s' => $islandora_object->id, '%t' => $e->getMessage())), 'error', FALSE);
    }
  }
  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : array();
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'islandora_red_biodiversidad__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);
  $variables['metadata'] = islandora_retrieve_metadata_markup($islandora_object);
  $variables['description'] = islandora_retrieve_description_markup($islandora_object);

  // Original.
  if (isset($islandora_object['OBJ']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['OBJ'])) {
    $full_size_url = url("islandora/object/{$islandora_object->id}/datastream/OBJ/view", array('absolute' => TRUE));
    $variables['islandora_full_url'] = $full_size_url;
    $params = array(
      'title' => $islandora_object->label,
      'path' => $full_size_url,
    );
    $variables['islandora_full_img'] = theme('image', $params);
  }
  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $thumbnail_size_url = url("islandora/object/{$islandora_object->id}/datastream/TN/view");
    $params = array(
      'title' => $islandora_object->label,
      'path' => $thumbnail_size_url,
    );
    $variables['islandora_thumbnail_img'] = theme('image', $params);
  }
 
  
}
/**
 * Implements hook_xml_form_builder_get_transforms().
 *Diego Pino Navarro, Febr. 2014
 */
function islandora_red_biodiversidad_xml_form_builder_get_transforms() {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  return array(
    'dwc2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwc2dc.xsl",
	'dwcclass2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclass2dc.xsl",
	'dwcclassevent2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassevent2dc.xsl",
	'dwcclasstaxon2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclasstaxon2dc.xsl",
	'dwcclassoccurrence2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassoccurrence2dc.xsl",
	'dctermsclasslocation2dc_redbiodiversidad.xsl' => "$module_path/xsl/dctermsclasslocation2dc.xsl",
	'dwcclassidentification2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassidentification2dc.xsl",
	'dwcclassgeologicalcontext2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassgeologicalcontext2dc.xsl",
	'dwcclassmaterialsample2dc_redbiodiversidad.xsl' => "$module_path/xsl/dwcclassmaterialsample2dc.xsl",
	'eml2dc.xsl' => "$module_path/xsl/invalid_eml211toDublinCore.xsl",
	
  );
}
/** Implements hook_xml_form_builder_get_self_transforms().
 * We are also adding a self transform 'emlself.xsl' for EML form in DWCACmodel(Darwin Core Archive Model). EML defines elements inside root <eml:eml> as unqualified, 
 * but XMLFORMS uses default namespace prefix por all elements(or i'm doing someting very wrong!), so i always get prefix eml: appended to all elements
 * solution: Dont´ use eml prefix for root element at all. Add it later using a selftransform. It's quicker to add only to the root elements, instead of removing every appender prefix.
 * @TODO fix it without self_transform: i need a <eml:eml> root with <dataset> etc elements without prefix. How? Please. mail me!
*/

function islandora_red_biodiversidad_xml_form_builder_get_self_transforms() {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
   return array('emlself.xsl' => "$module_path/xsl/emlself.xsl",);
}



/**
 * Implements hook_islandora_content_model_forms_form_associations().
 *Diego Pino Navarro, Febrero 2014
 *Este hook implementa la asociación de Formas HTML con el modelo de datos
 */								
function islandora_red_biodiversidad_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_red_biodiversidad_dwc_form' => array(
      'content_model' => 'biodiversity:SimpledwcCModel',
      'form_name' => 'Simple Darwin Core form',
      'dsid' => 'DwC',
      'title_field' => array('SimpleDarwinRecord','dwc_fields_taxon','scientificName'),
      'transform' => 'dwc2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassoccurrence_form' => array(
      'content_model' => 'biodiversity:OccurrenceCModel',
      'form_name' => 'Darwin Core form Class: Occurrence',
      'dsid' => 'DwC',
      'title_field' => array('Occurrence','dwc_fields_occurrence','occurrenceID'),
      'transform' => 'dwcclassoccurrence2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassevent_form' => array(
      'content_model' => 'biodiversity:EventCModel',
      'form_name' => 'Darwin Core form Class: Event',
      'dsid' => 'DwC',
      'title_field' => array('Event','dwc_fields_event','eventID'),
      'transform' => 'dwcclassevent2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclasstaxon_form' => array(
      'content_model' => 'biodiversity:TaxonCModel',
      'form_name' => 'Darwin Core form Class: Taxon',
      'dsid' => 'DwC',
      'title_field' => array('Taxon','dwc_fields_taxon','scientificName'),
      'transform' => 'dwcclasstaxon2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassidentification_form' => array(
      'content_model' => 'biodiversity:IdentificationCModel',
      'form_name' => 'Darwin Core form Class: Identification',
      'dsid' => 'DwC',
      'title_field' => array('Identification','dwc_fields_identification','identificationID'),
      'transform' => 'dwcclassidentification2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dctermsclasslocation_form' => array(
      'content_model' => 'biodiversity:LocationCModel',
      'form_name' => 'Darwin Core form Class: Location',
      'dsid' => 'DwC',
      'title_field' => array('Location','dwc_fields_location','locationID'),
      'transform' => 'dctermsclasslocation2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
	/*
    'islandora_red_biodiversidad_dwcclassmaterialsample_form' => array(
      'content_model' => 'biodiversity:MaterialSampleCModel',
      'form_name' => 'Darwin Core form Class: MaterialSample',
      'dsid' => 'DwC',
      'title_field' => array('Location','dwc_fields_location','locationID'),
      'transform' => 'dctermsclassmaterialsample2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),
    'islandora_red_biodiversidad_dwcclassgeologicalcontext_form' => array(
      'content_model' => 'biodiversity:GeologicalContextCModel',
      'form_name' => 'Darwin Core form Class: GeologicalContext',
      'dsid' => 'DwC',
      'title_field' => array('Location','dwc_fields_location','locationID'),
      'transform' => 'dctermsclassgeologicalcontext2dc_redbiodiversidad.xsl',
      'template' => FALSE,
    ),*/
	'islandora_red_biodiversidad_dwcaeml_form' => array(
      'content_model' => 'biodiversity:DWCACModel',
      'form_name' => 'Darwin Core Archive EML form',
      'dsid' => 'EML',
      'title_field' => array('dataset','title'),
      'transform' => 'eml2dc.xsl',
	  'self_transform' => 'emlself.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_red_biodiversidad_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_red_biodiversidad');
  return array(
    'Simple Darwin Core form' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwC.xml",
    ),
    'Darwin Core form Class: Occurrence' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassOccurrence.xml",
    ),
    'Darwin Core form Class: Event' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassEvent.xml",
    ),
    'Darwin Core form Class: Taxon' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassTaxon.xml",
    ),
    'Darwin Core form Class: Identification' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassIdentification.xml",
    ),
    'Darwin Core form Class: Location' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassLocation.xml",
    ),
    'Darwin Core Archive EML form' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_GBIF_EML.xml",
    ),
    /*'Darwin Core form Class: MaterialSample' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassMaterialSample.xml",
    ),
    'Darwin Core form Class: GeologicalContext' => array(
      'form_file' => "$module_path/xml/islandora_red_biodiversidad_form_DwCclassGeologicalContext.xml",
    ),*/
  );
}




function islandora_red_biodiversidad_biodiversity_DWCACModel_islandora_ingest_steps(array $form_state) {
  return array(
    'islandora_red_biodiversidad_source_collection_form' => array(
      'weight' => 2,
      'type' => 'form',
      'form_id' => 'islandora_red_biodiversidad_source_collection_form',
      'module' => 'islandora_red_biodiversidad',
      'file' => 'includes/source_collection.form.inc',
    ),
  );
}






/**
 * implements hook_form_alter
 * We want to alter the metadatasetp form values based on global configurations for a particular content 
 * model but xml forms do not get an unique FORM ID?(all id`s are islandora_ingest_form) so we must check for content model and step id
 * @note there is other way but for now stick to this method beacuse it works! 
*/

function islandora_red_biodiversidad_form_alter(&$form, &$form_state, $form_id) {
	
	if (isset($form['form_step_id']['#value']))
		{
		if (($form_id == 'islandora_ingest_form') && ($form['form_step_id']['#value']=='xml_form_builder_metadata_step')) //We are dealing with the form asocciated as default for this content model
			{
			switch($form_state['islandora']['shared_storage']['models'][0])
				{
				case 'biodiversity:OccurrenceCModel':
				case 'biodiversity:simpledwcCModel':
				if (isset($form['Occurrence']['record_level_terms']['institutionCode']))//First check if it´s still there!
					{
					$institutioncode = variable_get('islandora_red_biodiversidad_setting_institution_code', 'CBUCN');
					$form['Occurrence']['record_level_terms']['institutionCode']['#default_value']=$institutioncode;
					$form['Occurrence']['record_level_terms']['institutionID']['#default_value']=$institutioncode;
					 //@TODO we will get this and other values from a global configuration value	
					}
				if (isset($form['Occurrence']['dwc_fields_occurrence']['occurrenceID']))//First check if it´s still there!	
					{
					module_load_include('inc', 'islandora_red_biodiversidad', 'includes/utilities');
					$lastid=islandora_red_biodiversidad_getlast_dwc_mainid_viaSolr('biodiversity:OccurrenceCModel');
					if (sizeof($lastid)>0)
						{
						$form['Occurrence']['dwc_fields_occurrence']['occurrenceID']['#default_value']=++$lastid[1];	
						}
					}
				break;
				case 'biodiversity:DWCACModel':
				//Enable only when debugging!
				//dpm($form_state['islandora']['step_storage']);
				//dpm($form_state['islandora']['shared_storage']);
				//dpm($form['additionalMetadata']['metadata']['gbif']);
				if (isset($form['additionalMetadata']['metadata']['gbif']['collectionIdentifier']))
					{
					 $form['additionalMetadata']['metadata']['gbif']['collectionIdentifier']['#value']=$form_state['islandora']['shared_storage']['source_collection'];		
					}
				
				
				if (isset($form['eml_packageid']))//First check if it´s still there!
					{
					$form['eml_packageid']['#value']='system'; //@TODO we will get this and other values from a global configuration value	
					}
				}
			}
		}
	
	
	}
	
/* 
 * This are Validation Functions used in our Ingest Forms
*/
	function islandora_red_biodiversidad_lat_validate(&$element, &$form_state)
		{
			if (!preg_match('/^[-]?(([0-8]?[0-9])\.(\d+))|(90(\.0+)?)$/', $element['#value']))
			{
			form_error($element, t('You must enter a valid Decimal Latitud'));	
			}
		
		}
	function islandora_red_biodiversidad_long_validate(&$element, &$form_state)
		{
		if (!preg_match('/^[-]?((((1[0-7][0-9])|([0-9]?[0-9]))\.(\d+))|180(\.0+)?)$/', $element['#value']))
		{
		form_error($element, t('You must enter a valid Decimal Longitud'));	
		}
		}


function islandora_red_biodiversidad_islandora_ontologies_vlot_info() {
		
		return array('islandora_red_biodiversidad'=>array(
			 'biodiversity:TaxonCModel'=>array(		
	         	'cmodel_label' => 'Taxon',
	         	'color' => 'rgb(130,172,144)',
				),
			'biodiversity:OccurrenceCModel'=>array(		
			    'cmodel_label' => 'Occurrence',
			    'color' => 'rgb(249,160,27)',
				),	
			'biodiversity:EventCModel'=>array(		
				'cmodel_label' => 'Event',
				'color' => 'rgb(239,117,32)',
			 	),
			'biodiversity:LocationCModel'=>array(		
				'cmodel_label' => 'Location',
				'color' => 'rgb(48,52,53)',
				 ),
	 		'biodiversity:IdentificationCModel'=>array(		
	 			'cmodel_label' => 'Identification',
	 			'color' => 'rgb(142,163,174)',
	 			 ),
	 	 	'biodiversity:MaterialSampleCModel'=>array(		
	 	 		'cmodel_label' => 'MaterialSample',
	 	 		'color' => 'rgb(199,217,227)',
	 	 		 ),
	 	 	 'biodiversity:GeologicalContextCModel'=>array(		
	 	 	 	'cmodel_label' => 'GeologicalContext',
	 	 	 	'color' => 'rgb(194,157,138)',
	 	 	 	),
   	 	 	 'biodiversity:SimpledwcCModel'=>array(		
   	 	 	 	'cmodel_label' => 'MaterialSample',
   	 	 	 	'color' => 'rgb(219,216,198)',
   	 	 	 	),
      	 	 'default'=>array(		
      	 	 	 'cmodel_label' => 'Object',
      	 	 	 'color' => 'rgb(126,135,129)',
      	 	 	 ),
			 )
		);
		
		
	}	
	


		/**
		*Leaflet Map styles
		*/
function islandora_red_biodiversidad_leaflet_map_info() {
		  return array(
		    'islandora_red_biodiversidad' => array(
		      'label' => 'islandoraredbiodiversidad',
		      'description' => t('Leaflet Map for islandora red biodiversidad module'),
		      'settings' => array(
		        'zoom' => 4,
		        'minZoom' => 1,
		        'maxZoom' => 18,
		        'dragging' => TRUE,
		        'touchZoom' => TRUE,
		        'scrollWheelZoom' => TRUE,
		        'doubleClickZoom' => TRUE,
		        'zoomControl' => TRUE,
		        'attributionControl' => TRUE,
		        'trackResize' => TRUE,
		        'fadeAnimation' => TRUE,
		        'zoomAnimation' => TRUE,
		        'closePopupOnClick' => TRUE,
				'singleMarkerMode'=> TRUE,
				'zoomToBoundsOnClick' => TRUE,
				'showCoverageOnHover' => TRUE,
				'spiderfyOnMaxZoom' => TRUE,
				'disableClusteringAtZoom' => FALSE,
			    'maxClusterRadius' => 80,
			    'addRegionToolTips' => TRUE,
				'layerControl' => TRUE,
				'zoomControl' =>TRUE,
		      ),
		      'attribution' => array(
		        'prefix' => '',
		      ),
		      'layers' => array(
		        'Open Street Map' => array( 
				  'type' => 'xyz',
		          'urlTemplate' => 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
		          'options' => array(
		            'attribution' => '© OpenStreetMap contributors',
		          ),
		        ),
		        'Hight Contrast' => array(
				'type' => 'xyz',		          
		          'urlTemplate' => 'http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png',
		          'options' => array(
		          'attribution' => '© stamen.com',
		          ),
		        ),
		        'ESRI Ocean' => array(
				'type' => 'xyz',		          
		          'urlTemplate' => 'http://server.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer/tile/{z}/{y}/{x}',
		          'options' => array(
		          'attribution' => 'Tiles &copy; Esri &mdash; Sources: GEBCO, NOAA, CHS, OSU, UNH, CSUMB, National Geographic, DeLorme, NAVTEQ, and Esri',
				  'maxZoom:'=>13,
		          ),
		        ),
		        'ESRI DeLorme' => array(
				'type' => 'xyz',		          
		          'urlTemplate' => 'http://server.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer/tile/{z}/{y}/{x}',
		          'options' => array(
		          'attribution' => 'Tiles &copy; Esri &mdash; Copyright: &copy;2012 DeLorme',
				  'maxZoom:'=>11,
		          ),
		        ),			
		      ),
		    ),
		  );
		}		
		/**
		 * Implements hook_library().
		 */
function  islandora_red_biodiversidad_library() {

		  $path=drupal_get_path('module', 'islandora_red_biodiversidad');
		  $libraries['leaflet_markercluster_layercontrol'] = array(
		    'title' => 'Leaflet Markercluster Layer Control',
		    'version' => 0.1,
		    'js' => array(
		      array(
		        'type' => 'file',
		        'data' => "$path/js/leaflet.markercluster.layercontrol.js",
		        'group' => JS_LIBRARY,
		        'preprocess' => FALSE,
		        'weight' => 2,
		      ),
		    ), 
		  );

		  return $libraries;
		}
function islandora_red_biodiversidad_leaflet_map_prebuild_alter(&$vars = NULL) {
		  if (!isset($vars['map']['settings']['maxClusterRadius']) || $vars['map']['settings']['maxClusterRadius'] > 0) {
		    drupal_add_library('islandora_red_biodiversidad', 'leaflet_markercluster_layercontrol');
		    $options = array('type' => 'file', 'weight' => 2);
		    drupal_add_js(drupal_get_path('module', 'islandora_red_biodiversidad') . '/js/leaflet.markercluster.layercontrol.js', $options);
		    // Increase weight so we're included after 'leaflet_markercluster_drupal.js'
		   
		  }
		}
	
function islandora_red_biodiversidad_validateandpopulateTaxon(&$form, &$form_state)
	{        
	
		 //drupal_set_message(t('You just performed an ajax reload.'));
		 // $text = $form_state['values']['html_command_example'];
		  $selector ='#edit-dwc-fields-taxon-scientificname';
		  $commands = array();
	 
	 
		  $parametro=urlencode(trim($form['Taxon']['dwc_fields_taxon']['scientificName']['#value']));
	 
		  $url ="http://api.gbif.org/v0.9/species/match?strict=true&verbose=true&name=".$parametro;
		  //drupal_set_message($url);
		  $response = drupal_http_request($url);
		    if (!empty($response->error)) {
		      $msg_args = array(
		        '%url' => $url,
		        '@code' => $response->code,
		        '%error' => $response->error,
		      );
		      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
		      return FALSE;
		    }
		    $data = drupal_json_decode($response->data);
		
			//Ya tengo la info, solo voy a sacar el match más cercano
			if ($data['matchType']=="EXACT")//perfecto, ahora saco el resto de la info
				{
				if (array_key_exists('usageKey',$data))
					{
						if ($data['rank']=="SPECIES")
							{
							$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-scientificname','val',array($data['scientificName']));
							$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-taxonid','val',array($data['usageKey']));
							$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-source','val',array("http://www.gbif.org/species/".$data['usageKey']));
							}
						$url2 ="http://api.gbif.org/v0.9/species/".$data['usageKey'];
				  	    $response2 = drupal_http_request($url2);
				  	    if (!empty($response2->error)) {
				  	      $msg_args = array(
				  	        '%url' => $url2,
				  	        '@code' => $response2->code,
				  	        '%error' => $response2->error,
				  	      );
				  	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
				  	      return FALSE;
				  	    }
						 $data2 = drupal_json_decode($response2->data);
						 if (array_key_exists('phylum',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-phylum','val',array($data2['phylum']));	
						 	}
						 if (array_key_exists('clazz',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-class','val',array($data2['clazz']));	
						 	}
						 if (array_key_exists('order',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-order','val',array($data2['order']));		
						 	}
						 if (array_key_exists('family',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-family','val',array($data2['family']));		
						 	}
						 if (array_key_exists('genus',$data2))
						 	{
						 	$commands[] = ajax_command_invoke('#edit-taxon-dwc-fields-taxon-genus','val',array($data2['genus']));		
						 	}
					 
					 
					 
					 
					}
				
				}
				return array('#type' => 'ajax', '#commands' => $commands);
		
	}	
	
	
function islandora_red_biodiversidad_validateandpopulate(&$form, &$form_state)
{        
	
	//drupal_set_message(t('You just performed an ajax reload.'));
	 // $text = $form_state['values']['html_command_example'];
	  $selector ='#edit-simpledarwinrecord-dwc-fields-taxon-scientificname';
	  $commands = array();
	 
	 
	  $parametro=urlencode(trim($form['SimpleDarwinRecord']['dwc_fields_taxon']['scientificName']['#value']));
	 
	  $url ="http://api.gbif.org/v0.9/species/match?strict=true&verbose=true&name=".$parametro;
	  drupal_set_message($url);
	  $response = drupal_http_request($url);
	    if (!empty($response->error)) {
	      $msg_args = array(
	        '%url' => $url,
	        '@code' => $response->code,
	        '%error' => $response->error,
	      );
	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
	      return FALSE;
	    }
	    $data = drupal_json_decode($response->data);
		
		//Ya tengo la info, solo voy a sacar el match más cercano
		if ($data['matchType']=="EXACT")//perfecto, ahora saco el resto de la info
			{
			if (array_key_exists('usageKey',$data))
				{
					if ($data['rank']=="SPECIES")
						{
						$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-scientificname','val',array($data['scientificName']));
						$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-taxonid','val',array($data['usageKey']));
						$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-source','val',array("http://www.gbif.org/species/".$data['usageKey']));
						}
					$url2 ="http://api.gbif.org/v0.9/species/".$data['usageKey'];
			  	    $response2 = drupal_http_request($url2);
			  	    if (!empty($response2->error)) {
			  	      $msg_args = array(
			  	        '%url' => $url2,
			  	        '@code' => $response2->code,
			  	        '%error' => $response2->error,
			  	      );
			  	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
			  	      return FALSE;
			  	    }
					 $data2 = drupal_json_decode($response2->data);
					
					 if (array_key_exists('phylum',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-phylum','val',array($data2['phylum']));	
					 	}
					 if (array_key_exists('clazz',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-class','val',array($data2['clazz']));	
					 	}
					 if (array_key_exists('order',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-order','val',array($data2['order']));		
					 	}
					 if (array_key_exists('family',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-family','val',array($data2['family']));		
					 	}
					 if (array_key_exists('genus',$data2))
					 	{
					 	$commands[] = ajax_command_invoke('#edit-simpledarwinrecord-dwc-fields-taxon-genus','val',array($data2['genus']));		
					 	}
					 
					 
					 
					 
				}
				
			}
			return array('#type' => 'ajax', '#commands' => $commands);
		
}


/**
*QR code support function
*We are generating a QR code (printable) to be added to the actual paper version of a occurrence
*@param string $pid
*@return a svg representation of the object's absolut URL+ PID
*/
function islandora_red_biodiversidad_pidtoQR($pid)
	{ 
	include('phpqrcode/qrlib.php'); 
	$dataText=url(NULL, array('absolute' => TRUE))."/islandora/object/".urlencode($pid);
	
	$svgTagId   = 'qr'+$pid; 
	$saveToFile = false; 
	$imageWidth = 250; // px 
     
	    // SVG file format support 
	    $svgCode = QRcode::svg($dataText,$saveToFile, QR_ECLEVEL_L, 4); 
	  
	    return $svgCode; 
		
	}	


/**
*Enciclopedia Of life support function
*Using a query we can get additional info for our biodiversity:taxonCmodel objects.
*@param string $query
*@return a full array with info to be displayed or consumed by other functions
*/
function islandora_red_biodiversidad_eol_getdata($query)
	{  
		//We should/are caching this response....
		//so EOL can rest a bit
	
   
	$data2=array();
	  
	  $query=urlencode(trim($query));
	  if (!empty($query))
	  	{
		if ($cache = cache_get('islandora_red_biodiversidad_'.$query))
			{	
				//dpm('cache hit');
			$data2=$cache->data;		
			}	
		else
			{	
			
  	  $url ='http://eol.org/api/search/1.0.json?q='.$query.'&page=1&exact=false&filter_by_taxon_concept_id=&filter_by_hierarchy_entry_id=&filter_by_string=&cache_ttl=';

  	  //drupal_set_message($url);
  	  $response = drupal_http_request($url);
  	    if (!empty($response->error)) {
  	      $msg_args = array(
  	        '%url' => $url,
  	        '@code' => $response->code,
  	        '%error' => $response->error,
  	      );
  	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
  	      return FALSE;
  	    }
  	    $data = drupal_json_decode($response->data);
	
		if ($data['totalResults']>=1)//we got something
			{
			//we want the first one, we are searching for exact results only	
			$eol_data=array_shift($data['results']);		
			if (isset($eol_data['id'])) 
				{
					
					
				 $url2 ='http://eol.org/api/pages/1.0/'.$eol_data['id'].'.json?images=1&videos=0&sounds=0&maps=0&text=2&iucn=true&subjects=overview&licenses=cc-&details=true&common_names=true&synonyms=true&references=true&vetted=1&cache_ttl=';	
		     	 // drupal_set_message($url2);
		     	  $response2 = drupal_http_request($url2);
		     	    if (!empty($response->error)) {
		     	      $msg_args = array(
		     	        '%url' => $url2,
		     	        '@code' => $response->code,
		     	        '%error' => $response->error,
		     	      );
		     	      drupal_set_message(t('Red de Biodiversidad, the HTTP request %url returned the following error (code @code): %error.', $msg_args), 'error');
		     	      return FALSE;
		     	    }
		     	    $data2 = drupal_json_decode($response2->data);	//Now we got the whole data
					//This data is huge!
					if (!empty($data2['identifier']))//Should be present and equal to $eol_data['id']
						{
						//get synonyms and get rid off duplicates.
						$data2['synonyms']=array_map("unserialize", array_unique(array_map("serialize", $data2['synonyms'])));
						$data2['vernacularNames'];
						$data2['references'];
						$data2['taxonConcepts'];//Links to external sources and their identifiers
						$data2['dataObjects']; //all the other info
						
						cache_set('islandora_red_biodiversidad_'.$query, $data2, 'cache', time() + 86400);	
						}
						
				}
				
			}	
				
		
	}
}

		return $data2;
	}
/**
 * Implements hook_islandora_datastream_alter().
 * We need to alter the  data for the  biodiversity:DWCACModel from the ingested EML stream. We don´t have the Object ID prior to ingesting and we need this value in the EML!
 * We also add dateStamp inside EML 
 */
function islandora_red_biodiversidad_biodiversity_DWCACModel_EML_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
	
  $modified=false;
  switch ($context['action']) {
    case 'ingest':
	$dom= new DOMDocument;
	$dom->loadXML($datastream->content);
	$dom->preserveWhiteSpace = false;
	$emlnode=$dom->getElementsByTagName('eml');
	foreach ($emlnode as $item) {
		if ($item->getAttribute('packageId')=='system')//system - Our super secret word for "just replace this value with the object's ID"
			{
			$link = url('islandora/object/'.$object->id, array('absolute' => TRUE));
			$item->setAttribute('packageId', $object->id);
			$alternateid=$dom->getElementsByTagName('alternateIdentifier');
			foreach($alternateid as $item2)
				{
				$item2->nodeValue=$link;
				}
			
			$modified=TRUE;
			}
	}
	$datestamp=$dom->getElementsByTagName('dateStamp');
  
	foreach($datestamp as $item3)
			{	
			$item3->nodeValue=date("Y-m-d\TH:i:s\Z",time());	
			$modified=TRUE;
			}
	if 	($modified)
		{
		$modifiedEML=$dom->saveXML();
		$datastream->setContentFromString($modifiedEML);
		
		}
	
	
	
	break;
	
	case 'modify':
	//EML		
	if (sizeof($context['params']['dsString'])>0)
		{
		$dom= new DOMDocument;
		$dom->loadXML($context['params']['dsString']);
		$dom->preserveWhiteSpace = false;
		$emlnode=$dom->getElementsByTagName('eml');
		foreach ($emlnode as $item) {
			if ($item->getAttribute('packageId')=='system')//system - Our super secret word for "just replace this value with the object's ID"
				{
				$link = url('islandora/object/'.$object->id, array('absolute' => TRUE));
				$item->setAttribute('packageId', $object->id);
				$alternateid=$dom->getElementsByTagName('alternateIdentifier');
				
				foreach($alternateid as $item2)
					{
					$item2->nodeValue=$link;
					}
				$modified=TRUE;
				}
		}
		$datestamp=$dom->getElementsByTagName('dateStamp');
      
		foreach($datestamp as $item3)
				{	
				
				$item3->nodeValue=date("Y-m-d\TH:i:s\Z",time());	
			
				$modified=TRUE;
				}
		
		
	if 	($modified)
		{
		$modifiedEML=$dom->saveXML();	
		$context['params']['dsString']=$modifiedEML;
		
		}
	}
      break;

   
  		}
}
